#Использовать logos

Перем ВерсияПлагина;
Перем Лог;
Перем КомандыПлагина;
Перем ВызватьОшибку;
Перем ПрефиксЗадачи;
Перем МинимальноеКоличествоЗадач;
Перем МаксимальноеКоличествоЗадач;

#Область Интерфейс_плагина

// Возвращает версию плагина
//
//  Возвращаемое значение:
//   Строка - текущая версия плагина
//
Функция Версия() Экспорт
	Возврат "1.3.0";
КонецФункции

// Возвращает приоритет выполнения плагина
//
//  Возвращаемое значение:
//   Число - приоритет выполнения плагина
//
Функция Приоритет() Экспорт
	Возврат 0;
КонецФункции

// Возвращает описание плагина
//
//  Возвращаемое значение:
//   Строка - описание функциональности плагина
//
Функция Описание() Экспорт
	Возврат "Плагин добавляет функциональность проверки комментариев в хранилище";
КонецФункции

// Возвращает подробную справку к плагину 
//
//  Возвращаемое значение:
//   Строка - подробная справка для плагина
//
Функция Справка() Экспорт
	Возврат "Справка плагина";
КонецФункции

// Возвращает имя плагина
//
//  Возвращаемое значение:
//   Строка - имя плагина при подключении
//
Функция Имя() Экспорт
	Возврат "check-comments";
КонецФункции 

// Возвращает имя лога плагина
//
//  Возвращаемое значение:
//   Строка - имя лога плагина
//
Функция ИмяЛога() Экспорт
	Возврат "oscript.lib.gitsync.plugins.check-comments";
КонецФункции

#КонецОбласти

#Область Подписки_на_события

Процедура ПриРегистрацииКомандыПриложения(ИмяКоманды, КлассРеализации) Экспорт

	Лог.Отладка("Ищу команду <%1> в списке поддерживаемых", ИмяКоманды);
	Если КомандыПлагина.Найти(ИмяКоманды) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Лог.Отладка("Устанавливаю дополнительные параметры для команды %1", ИмяКоманды);

	КлассРеализации.Опция("C error-comment", Ложь, "[*check-comments] флаг вызова ошибки при отсутствии текста комментария")
					.Флаговый();

	КлассРеализации.Опция("task-prefix", "", "[*check-comments] Префикс задачи.")
					.ВОкружении("GITSYNC_TASK_PREFIX")
					.Обязательный(Ложь);
			
	КлассРеализации.Опция("min-task-count", 0, СтрШаблон("[*check-comments] Минимальное количество упоминаний задач"))
					.ТЧисло()
					.Обязательный(Ложь);
							
	КлассРеализации.Опция("max-task-count", 0, СтрШаблон("[*check-comments] Максимальное количество упоминаний задач"))
					.ТЧисло()
					.Обязательный(Ложь);

КонецПроцедуры

Процедура ПриПолученииПараметров(ПараметрыКоманды) Экспорт

	ВызватьОшибку = ПараметрыКоманды.Параметр("error-comment", Ложь);
	
	ВызватьОшибку = Булево(ВызватьОшибку);
	Лог.Отладка("Получаю параметр <error-comment> значение <%1>", ВызватьОшибку);
	
	ПрефиксЗадачи = ПараметрыКоманды.Параметр("task-prefix", "");
	Лог.Отладка("Получаю параметр <task-prefix> значение <%1>", ПрефиксЗадачи);
		
	МинимальноеКоличествоЗадач = ПараметрыКоманды.Параметр("min-task-count", 0);
	Лог.Отладка("Получаю параметр <min-task-count> значение <%1>", МинимальноеКоличествоЗадач);
	
	МаксимальноеКоличествоЗадач = ПараметрыКоманды.Параметр("max-task-count", 0);
	Лог.Отладка("Получаю параметр <max-task-count> значение <%1>", МаксимальноеКоличествоЗадач);
	
КонецПроцедуры

Процедура ПередОбработкойВерсииХранилища(СтрокаВерсии, СледующаяВерсия) Экспорт

	ПроверитьЗаполненностьКомментария(СтрокаВерсии, СледующаяВерсия);
	
	ПроверитьКомментарийНаНаличиеУпоминанийЗадач(СтрокаВерсии, СледующаяВерсия);
		
КонецПроцедуры

Процедура ПроверитьЗаполненностьКомментария(СтрокаВерсии, СледующаяВерсия)

	Если Не ПустаяСтрока(СтрокаВерсии.Комментарий) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОшибки = СтрШаблон("Версия <%1> от автора <%2>: комментарий не задан", 
							СледующаяВерсия,
							 СтрокаВерсии.Автор);
	Лог.КритичнаяОшибка(СтрокаОшибки);

	Если ВызватьОшибку Тогда

		ВызватьИсключение СтрокаОшибки;

	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьКомментарийНаНаличиеУпоминанийЗадач(СтрокаВерсии, СледующаяВерсия)

	Если ПустаяСтрока(ПрефиксЗадачи) Или ПустаяСтрока(СтрокаВерсии.Комментарий) Тогда
		Возврат;
	КонецЕсли;
	
	РВ = Новый РегулярноеВыражение(СтрШаблон("%1-%2", ПрефиксЗадачи, "\d"));
	Совпадения = РВ.НайтиСовпадения(СтрокаВерсии.Комментарий); 
	КоличествоВхождений = Совпадения.количество();
	
	Если КоличествоВхождений < МинимальноеКоличествоЗадач Тогда
		СтрокаОшибки = СтрШаблон("Версия <%1> от автора <%2>: количество упоминаний задач %3 (%4) меньше требуемого (%5)", 
							СледующаяВерсия,
							 СтрокаВерсии.Автор, ПрефиксЗадачи, КоличествоВхождений, МинимальноеКоличествоЗадач);
							 
		Лог.КритичнаяОшибка(СтрокаОшибки);
	
		Если ВызватьОшибку Тогда

			ВызватьИсключение СтрокаОшибки;

		КонецЕсли;
		
	КонецЕсли;
	
	Если КоличествоВхождений > МаксимальноеКоличествоЗадач Тогда
		СтрокаОшибки = СтрШаблон("Версия <%1> от автора <%2>: количество упоминаний задач %3 (%4) больше требуемого (%5)", 
							СледующаяВерсия,
							 СтрокаВерсии.Автор, ПрефиксЗадачи, КоличествоВхождений, МаксимальноеКоличествоЗадач);
							 
		Лог.КритичнаяОшибка(СтрокаОшибки);
	
		Если ВызватьОшибку Тогда

			ВызватьИсключение СтрокаОшибки;

		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры
#КонецОбласти

Процедура Инициализация()

	ВерсияПлагина = "1.3.0";
	Лог = Логирование.ПолучитьЛог(ИмяЛога());
	КомандыПлагина = Новый Массив;
	КомандыПлагина.Добавить("sync");

КонецПроцедуры

Инициализация();
